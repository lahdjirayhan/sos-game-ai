{"version":3,"sources":["StickyHeader.js","Utils.js","GameContainer.js","ControlContainer.js","MainContainer.js","App.js","reportWebVitals.js","index.js"],"names":["StickyHeader","className","Button","props","onClick","text","Scoreboard","stringPlayerScore","playerScore","toString","stringEnemyScore","enemyScore","Square","value","Board","state","size","Math","sqrt","squares","length","i","this","row","thisRow","push","renderSquare","rows","renderRow","linesToRender","lines","forEach","json","startEnd","start","end","color","from","to","fromAnchor","toAnchor","zIndex","borderColor","borderSize","borderStyle","React","Component","Game","sButtonClassName","selectedMarker","oButtonClassName","handleClick","handleClickOnS","handleClickOnO","GameContainer","gameInProgress","ModelDropdownSelect","id","selectedValue","onChange","disabled","selected","hidden","modelList","map","modelID","FirstTurnDropdownSelect","ControlContainer","controlButton","stopGame","startGame","selectedValueTurn","onChangeTurn","selectedValueModel","onChangeModel","turnJSStateIntoCNNState","cnnState","mark","tile","divmodMimicAction","action","floor","countSOS","loc","boardLength","locRow","locCol","indexesToCheckForSOS","stepN","stepS","stepNE","stepNW","stepSE","stepSW","expand","dir","checkWest","checkNorth","checkSouth","console","log","checkV","stepV","numberOfSOSCreated","arrLineFromTo","indexes","join","MainContainer","Array","fill","playerLineColor","enemyLineColor","activeModelID","listModelID","enemyMovesFirst","fetch","then","response","model_ids","result","setState","catch","error","a","method","cache","headers","body","JSON","stringify","fetchActionPromise","marker","startEnds","filter","x","makeMoveAI","dropdownSelection","target","moveFirst","endGame","handleModelSelectionChange","handleTurnSelectionChange","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95f64c09.chunk.js","sourcesContent":["import './StickyHeader.css'\r\n\r\nfunction StickyHeader() {\r\n    return (\r\n        <div className='header'>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default StickyHeader;","function Button(props) {\r\n    return (\r\n        <button onClick={props.onClick} className={props.className}>\r\n            {props.text}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React from 'react'\r\nimport Button from './Utils'\r\nimport './GameContainer.css'\r\nimport LineTo from 'react-lineto'\r\n\r\n/* Some notes regarding react-lineto:\r\n   The lines made are position-absolute. From what I've tested,\r\n   the lines are anchored to pixel position with regard to browser window.\r\n   The `within` argument can't help much either (or I just don't know\r\n   how to do it properly). Since I'm not very fluent in webdev in general,\r\n   this is a problem I can't solve in present day. */\r\n\r\nfunction Scoreboard(props) {\r\n    let stringPlayerScore = \"Your score: \" + props.playerScore.toString()\r\n    let stringEnemyScore = \"Enemy score: \" + props.enemyScore.toString()\r\n    return (\r\n        <div className='scoreboard'>\r\n            <p>{stringPlayerScore}</p>\r\n            <p>{stringEnemyScore}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction Square(props) {\r\n    let className = \"square\" + \" \" + props.className;\r\n    return (\r\n        <button className={className} onClick={props.onClick}>\r\n            {props.value}\r\n        </button>\r\n    )\r\n}\r\nclass Board extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            size: Math.sqrt(props.squares.length),\r\n        }\r\n    }\r\n    renderSquare(i) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                className={\"c\" + i.toString()}\r\n                onClick={() => this.props.onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    renderRow(row) {\r\n        let thisRow = [];\r\n        for (let i = row * this.state.size; i < (row + 1) * this.state.size; i++) {\r\n            thisRow.push(this.renderSquare(i))\r\n        }\r\n        return (\r\n            <div className='board-row'>\r\n                {thisRow}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    render() {\r\n        let rows = [];\r\n        for (let i = 0; i < this.state.size; i++) {\r\n            rows.push(this.renderRow(i))\r\n        }\r\n        let linesToRender = [];\r\n        this.props.lines.forEach(json => {\r\n            let [start, end] = json.startEnd;\r\n            start = \"c\" + start;\r\n            end = \"c\" + end;\r\n            const color = json.color;\r\n            \r\n            linesToRender.push(\r\n                <LineTo from={start} to={end}\r\n                fromAnchor=\"center center\" toAnchor=\"center center\"\r\n                zIndex={1}\r\n                borderColor={color} borderSize=\"10px\" borderStyle=\"solid\"/>\r\n            )\r\n        })\r\n\r\n        return (\r\n            <div className='board'>\r\n                {rows}\r\n                {linesToRender}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let sButtonClassName = \"button-so\" + (this.props.selectedMarker === \"S\" ? \" button-so-selected\" : \"\")\r\n        let oButtonClassName = \"button-so\" + (this.props.selectedMarker === \"O\" ? \" button-so-selected\" : \"\")\r\n        return (\r\n            <div className=\"game\">\r\n                <Board\r\n                    squares={this.props.squares}\r\n                    onClick={(i) => this.props.handleClick(i)}\r\n                    lines={this.props.lines}\r\n                />\r\n                <div className=\"button-so-container\">\r\n                    <Button className={sButtonClassName} onClick={() => this.props.handleClickOnS()} text=\"S\"/>\r\n                    <Button className={oButtonClassName} onClick={() => this.props.handleClickOnO()} text=\"O\"/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass GameContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        let status;\r\n        if (this.props.gameInProgress) {\r\n            status = 'There is a game in progress.'\r\n        } else {\r\n            status = 'There is NO game in progress.'\r\n        }\r\n        return (\r\n            <div className='game-container'>\r\n                <Game\r\n                    gameInProgress={this.props.gameInProgress}\r\n                    squares={this.props.squares}\r\n                    handleClick={(i) => this.props.handleClick(i)}\r\n                    handleClickOnS={() => this.props.handleClickOnS()}\r\n                    handleClickOnO={() => this.props.handleClickOnO()}\r\n                    selectedMarker={this.props.selectedMarker}\r\n                    lines={this.props.lines}\r\n                />\r\n\r\n                <Scoreboard\r\n                    playerScore={this.props.playerScore}\r\n                    enemyScore={this.props.enemyScore}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GameContainer;","import './ControlContainer.css'\r\nimport Button from './Utils.js'\r\n\r\nfunction ModelDropdownSelect(props) {\r\n    return (\r\n        <select id='model-dropdown'\r\n        className='model-dropdown'\r\n        value={props.selectedValue}\r\n        onChange={props.onChange}>\r\n            <option value={null} disabled selected hidden>\r\n                Please select an enemy\r\n            </option>\r\n            {props.modelList ? props.modelList.map(modelID => (\r\n                <option value={modelID}>\r\n                    {modelID}\r\n                </option>\r\n            )) : null}\r\n        </select>\r\n    );\r\n}\r\n\r\nfunction FirstTurnDropdownSelect(props) {\r\n    return (\r\n    <select id='turn-dropdown'\r\n    className='turn-dropdown'\r\n    value={props.selectedValue}\r\n    onChange={props.onChange}>\r\n        <option value={\"AI\"}>\r\n            AI moves first\r\n        </option>\r\n        <option value={\"player\"}>\r\n            I move first\r\n        </option>\r\n    </select>\r\n    )\r\n}\r\n\r\nfunction ControlContainer(props) {\r\n    let controlButton;\r\n    if (props.gameInProgress){\r\n        controlButton = <Button onClick={props.stopGame} className='start-resign-button' text=\"RESIGN\"/>\r\n    } else {\r\n        controlButton = <Button onClick={props.startGame} className='start-resign-button' text=\"START\"/>\r\n    }\r\n    return (\r\n        <div className='control'>\r\n            <FirstTurnDropdownSelect \r\n                selectedValue={props.selectedValueTurn}\r\n                onChange={props.onChangeTurn}\r\n            />\r\n\r\n            <ModelDropdownSelect\r\n                selectedValue={props.selectedValueModel}\r\n                onChange={props.onChangeModel}\r\n                modelList={props.modelList}\r\n            />\r\n\r\n            {controlButton}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ControlContainer;","import './MainContainer.css'\r\nimport GameContainer from './GameContainer'\r\nimport ControlContainer from './ControlContainer'\r\nimport React from 'react';\r\n\r\nfunction turnJSStateIntoCNNState(squares) {\r\n    const cnnState = [];\r\n    for (const mark of [\"S\", \"O\"]) {\r\n        for (const tile of squares) {    \r\n            cnnState.push( (tile === mark ? 1: 0) )\r\n        }\r\n    }\r\n    return cnnState;\r\n}\r\n\r\nfunction divmodMimicAction(action) {\r\n    /* Mimics divmod(action, 2) from Python */\r\n    const loc = Math.floor(action/2);\r\n    const marker = action % 2;\r\n    return [loc, marker];\r\n}\r\n\r\nfunction countSOS(squares, loc) {\r\n    /* Given that squares[loc] is already not null (filled), count how many SOS are made. \r\n       Follows the implementation I previously use in Python project sos-game-ai, \r\n       with several (probably minor) modifications. */\r\n    if (squares[loc] === null) {\r\n        return 0;\r\n    }\r\n    \r\n    const boardLength = Math.sqrt(squares.length);\r\n    const locRow = Math.floor(loc/boardLength);\r\n    const locCol = loc % boardLength;\r\n    const indexesToCheckForSOS = [];\r\n\r\n    const stepE = 1;\r\n    const stepW = -1;\r\n    const stepN = -boardLength;\r\n    const stepS = boardLength;\r\n\r\n    const stepNE = stepE + stepN;\r\n    const stepNW = stepW + stepN;\r\n    const stepSE = stepE + stepS;\r\n    const stepSW = stepW + stepS;\r\n    if (squares[loc] === \"S\") {\r\n        const checkEast = locCol < boardLength - 2;\r\n        const checkWest = locCol > 1;\r\n        const checkNorth = locRow > 1;\r\n        const checkSouth = locRow < boardLength - 2;\r\n        \r\n        function expand(loc, dir) {\r\n            return [loc, loc + dir, loc + 2*dir];\r\n        }\r\n\r\n        if (checkEast) {\r\n            indexesToCheckForSOS.push(expand(loc, stepE));\r\n            if (checkNorth) {\r\n                indexesToCheckForSOS.push(expand(loc, stepNE));\r\n            }\r\n            if (checkSouth) {\r\n                indexesToCheckForSOS.push(expand(loc, stepSE));\r\n            }\r\n        }\r\n\r\n        if (checkWest) {\r\n            indexesToCheckForSOS.push(expand(loc, stepW));\r\n            if (checkNorth) {\r\n                indexesToCheckForSOS.push(expand(loc, stepNW));\r\n            }\r\n            if (checkSouth) {\r\n                indexesToCheckForSOS.push(expand(loc, stepSW));\r\n            }\r\n        }\r\n\r\n        if(checkNorth) {\r\n            indexesToCheckForSOS.push(expand(loc, stepN));\r\n        }\r\n\r\n        if(checkSouth) {\r\n            indexesToCheckForSOS.push(expand(loc, stepS));\r\n        }\r\n    \r\n    } else if (squares[loc] === \"O\") {\r\n        const checkH = (0 < locCol) && (locCol < boardLength - 1);\r\n        const checkV = (0 < locRow) && (locRow < boardLength - 1);\r\n        \r\n        const stepH = 1;\r\n        const stepV = boardLength;\r\n\r\n        function expand(loc, dir) {\r\n            return [loc - dir, loc, loc + dir];\r\n        }\r\n\r\n        if (checkH) {\r\n            indexesToCheckForSOS.push(expand(loc, stepH));\r\n            if (checkV) {\r\n                indexesToCheckForSOS.push(expand(loc, stepH + stepV));\r\n                indexesToCheckForSOS.push(expand(loc, -stepH + stepV));\r\n            }\r\n        }\r\n\r\n        if (checkV) {\r\n            indexesToCheckForSOS.push(expand(loc, stepV));\r\n        }\r\n\r\n    } else {\r\n        console.log(\"The given squares[loc] does not contain either S or O. Check.\");\r\n        return;\r\n    }\r\n\r\n    let numberOfSOSCreated = 0;\r\n    let arrLineFromTo = [];\r\n    indexesToCheckForSOS.forEach(indexes => {\r\n        /* Get squares multiple indexes, https://stackoverflow.com/a/67835428/11316205 */\r\n        let potentialSOS = indexes.map(i => squares[i]);\r\n\r\n        if (potentialSOS.join('') === \"SOS\") {\r\n            numberOfSOSCreated++;\r\n            arrLineFromTo.push([indexes[0], indexes[indexes.length - 1]]);\r\n        }\r\n    })\r\n\r\n    return [numberOfSOSCreated, arrLineFromTo];\r\n}\r\n\r\nclass MainContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gameInProgress: false,\r\n            squares: Array(5 * 5).fill(null),\r\n            selectedMarker: null,\r\n\r\n            playerScore: 0,\r\n            enemyScore: 0,\r\n\r\n            lines: [],\r\n\r\n            playerLineColor: \"blue\",\r\n            enemyLineColor: \"red\",\r\n\r\n            activeModelID: null,\r\n            listModelID: null,\r\n\r\n            enemyMovesFirst: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch(\"/api/list\")\r\n        .then(response => response.json())\r\n        .then(json => json.model_ids)\r\n        .then(result => this.setState({listModelID: result}))\r\n        .catch(error => console.error(error))\r\n    }\r\n\r\n    async fetchActionPromise() {\r\n        const response = await fetch(\"/api/predict\", {\r\n            method: \"POST\",\r\n            cache: \"no-cache\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            },\r\n            body: JSON.stringify({\r\n                \"state\": turnJSStateIntoCNNState(this.state.squares),\r\n                \"model_id\": this.state.activeModelID,\r\n            })\r\n        });\r\n        try {\r\n            const json = await response.json();\r\n            return json.action;\r\n        } catch(error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    async makeMoveAI() {\r\n        if (!this.state.gameInProgress) {return;}\r\n        const action = await this.fetchActionPromise();\r\n        const [loc, marker] = divmodMimicAction(action);\r\n        console.log(loc, marker);\r\n        \r\n        const squares = this.state.squares;\r\n        if (squares[loc]) {\r\n            console.error(\"AI MOVES ILLEGALLY!\")\r\n        }\r\n        squares[loc] = (marker === 0 ? \"S\" : \"O\");\r\n        const [numberOfSOSCreated, arrLineFromTo] = countSOS(squares, loc);\r\n        const enemyScore = this.state.enemyScore + numberOfSOSCreated;\r\n        const lines = this.state.lines;\r\n        arrLineFromTo.forEach(startEnds => {\r\n            lines.push({\r\n                \"startEnd\": startEnds,\r\n                \"color\": this.state.enemyLineColor,\r\n            });\r\n        });\r\n        this.setState({\r\n            squares: squares,\r\n            enemyScore: enemyScore,\r\n            lines: lines,\r\n        });\r\n\r\n        if (squares.filter(x => x).length === squares.length) {\r\n            this.setState({\r\n                gameInProgress: false,\r\n            })\r\n        }\r\n\r\n        if (numberOfSOSCreated > 0) {\r\n            await this.makeMoveAI()\r\n        }\r\n        \r\n    }\r\n    async handleClick(i) {\r\n        if (!this.state.gameInProgress || this.state.selectedMarker === null) {\r\n            return;\r\n        }\r\n\r\n        const squares = this.state.squares;\r\n        if (squares[i] !== null){\r\n            return\r\n        }\r\n\r\n        squares[i] = this.state.selectedMarker;\r\n        const [numberOfSOSCreated, arrLineFromTo] = countSOS(squares, i);\r\n        const playerScore = this.state.playerScore + numberOfSOSCreated;\r\n        const lines = this.state.lines;\r\n        arrLineFromTo.forEach(startEnds => {\r\n            lines.push({\r\n                \"startEnd\": startEnds,\r\n                \"color\": this.state.playerLineColor,\r\n            });\r\n        });\r\n        this.setState({\r\n            squares: squares,\r\n            playerScore: playerScore,\r\n            lines: lines,\r\n\r\n            selectedMarker: null,\r\n        });\r\n\r\n        if (squares.filter(x => x).length === squares.length) {\r\n            this.setState({\r\n                gameInProgress: false,\r\n            });\r\n            return;\r\n        }\r\n\r\n        if (numberOfSOSCreated === 0) {\r\n            await this.makeMoveAI()\r\n        }\r\n    }\r\n\r\n    handleClickOnS() {\r\n        if (!this.state.gameInProgress) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            selectedMarker: (this.state.selectedMarker !== \"S\" ? \"S\" : null),\r\n        })\r\n    }\r\n\r\n    handleClickOnO() {\r\n        if (!this.state.gameInProgress) {\r\n            return;\r\n        }\r\n        this.setState({\r\n            selectedMarker: (this.state.selectedMarker !== \"O\" ? \"O\" : null),\r\n        })\r\n    }\r\n\r\n    handleModelSelectionChange(dropdownSelection) {\r\n        this.setState({\r\n            activeModelID: dropdownSelection.target.value\r\n        });\r\n    }\r\n\r\n    handleTurnSelectionChange(dropdownSelection) {\r\n        if (this.state.gameInProgress) {return;}\r\n        let moveFirst = dropdownSelection.target.value;\r\n        console.log(moveFirst);\r\n        if (moveFirst === \"player\") {\r\n            this.setState({\r\n                enemyMovesFirst: false,\r\n            });\r\n        } else if (moveFirst === \"AI\") {\r\n            this.setState({\r\n                enemyMovesFirst: true,\r\n            });\r\n        }\r\n    }\r\n\r\n    async startGame() {\r\n        if (!this.state.activeModelID) {return;}\r\n        \r\n        this.setState({\r\n            squares: Array(5 * 5).fill(null),\r\n            gameInProgress: true,\r\n            selectedMarker: null,\r\n            playerScore: 0,\r\n            enemyScore: 0,\r\n            lines: [],\r\n        }, () => {\r\n            /* https://stackoverflow.com/questions/38558200/react-setstate-not-updating-immediately */\r\n            if (this.state.enemyMovesFirst) {\r\n            this.makeMoveAI();\r\n        }});\r\n    }\r\n\r\n    endGame() {\r\n        this.setState({\r\n            gameInProgress: false,\r\n            selectedMarker: null,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='main'>\r\n                <GameContainer\r\n                    gameInProgress={this.state.gameInProgress}\r\n                    squares={this.state.squares}\r\n                    selectedMarker={this.state.selectedMarker}\r\n                    playerScore={this.state.playerScore}\r\n                    enemyScore={this.state.enemyScore}\r\n\r\n                    handleClick={(i) => this.handleClick(i)}\r\n                    handleClickOnS={() => this.handleClickOnS()}\r\n                    handleClickOnO={() => this.handleClickOnO()}\r\n\r\n                    lines={this.state.lines}\r\n                />\r\n                <ControlContainer\r\n                    gameInProgress={this.state.gameInProgress}\r\n\r\n                    startGame={() => this.startGame()}\r\n                    stopGame={() => this.endGame()}\r\n\r\n                    selectedValueModel={this.state.activeModelID}\r\n                    onChangeModel={(i) => this.handleModelSelectionChange(i)}\r\n                    modelList={this.state.listModelID}\r\n\r\n                    onChangeTurn={(i) => this.handleTurnSelectionChange(i)}\r\n                    selectedValueTurn={(this.state.enemyMovesFirst ? \"AI\": \"player\")}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MainContainer;","import StickyHeader from './StickyHeader'\nimport MainContainer from './MainContainer'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <StickyHeader />\n      <MainContainer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}